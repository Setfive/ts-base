5x - 2y + 1z = 4
2x - 1y + 5z = -2
-4x + 3y - 15z = 7
x1 = 1/2
x2 = -7/6
x3 = -5/6

1x0 - 3x1 + 1x2 = 4
2x0 - 8x1 + 8x2 = -2
-6x0 + 3x1 - 15x2 = 9


const net = require('net');
const tls = require('tls');

class Main {
    myConfig : Config;
    myMsg : string;

    private cliToConfig(params : any) : Config {
        return {url: params["_"][0], httpData: params["d"], httpVerb: params["X"]};
    }

    private getHttpMessage(config : Config) : string {
        const wholeURL = this.myConfig.url;
        if (this.myConfig.httpVerb == "GET") {
            if (wholeURL.search(/www/gi) != -1) {
                const host = wholeURL.split("www.")[1].split("/")[0];
                const goal = wholeURL.split("www.")[1].split("/")[1];
                return config.httpVerb + " /" + goal + " HTTP/1.0\nHost: " + host + "\n\n";
            }
            else {
                const host = wholeURL.split("/")[0];
                const goal = wholeURL.split("/")[1];
                return config.httpVerb + " /" + goal + " HTTP/1.0\nHost: " + host + "\n\n";
            }
        }
        else {
            if (wholeURL.search(/www/gi) != -1) {
                const host = wholeURL.split("//")[1].split("www.")[1].split("/")[0];
                const goal = wholeURL.split("www.")[1].split("/")[1];
                return config.httpVerb + " /" + goal + " HTTP/1.1\nHost: " + host + "\nAccept: */*\nContent-Type: application/json;charset=utf-8\nCookie: PHPSESSID=ste1uhg1brkfbvuumk4sleq1i0;\nContent-Length: 189\n\n" + this.myConfig.httpData + "\n";

            }
            else {
                const remHTTPS = wholeURL.split("//")[1];
                console.log(remHTTPS);
                const host = remHTTPS.split("/")[0];
                const goal = "view/234/add_song";
                //const goal = remHTTPS.split("/",1)[1];
                return config.httpVerb + " /" + goal + " HTTP/1.1\nHost: " + host + "\nAccept: */*\nContent-Type: application/json;charset=utf-8\nCookie: PHPSESSID=ste1uhg1brkfbvuumk4sleq1i0;\nContent-Length: 189\n\n" + this.myConfig.httpData +"\n";

            }
        }

    }

    private writeMessage(message : string) : string {

        // detect if HTTPs, then use https://nodejs.org/api/tls.html#tls_tls_connect_options_callback


        const s = net.Socket();
        const fullUrl = this.myConfig.url;
        const host = "jointdj.com"
        s.connect(443, host);
        const options = {
            host : host,
            socket : s,
            servername : host,
        };
        const wwwUrl = fullUrl.split("www.")[1];
        const theMsg = this.getHttpMessage(this.myConfig);
        if(fullUrl.search(/https/gi) != -1) {
            console.log("contains https");
            const socket = tls.connect(options);
            socket.write(theMsg);
            socket.on('data', function(d : any) {
               console.log(d.toString()) ;
            })
            socket.end();
        }
        else {
            if (wwwUrl != undefined) {
                const host = wwwUrl.split("/")[0];
                s.connect(80, host);
            }
            else {
                const host = fullUrl.split("/")[0];
                s.connect(80, host);
            }

            s.write(theMsg);
            s.on('data', function (d: any) {
                console.log(d.toString());
            })
            s.end();
        }



        /**
         * Socket example:
         * var s = socket.Socket();
         s.connect(80, 'google.com');
         s.write('GET http://www.google.com/ HTTP/1.1\n\n');

         s.on('data', function(d){
    console.log(d.toString());
});
         s.end();
         */
        return "";
    }

    public Main(params : any) : void {
        this.myConfig = this.cliToConfig(params);
        this.myMsg = this.getHttpMessage(this.myConfig)
        console.log("it worked!");
        //console.log(this.cliToConfig(params));
        var conInf = this.cliToConfig(params);
        console.log(this.getHttpMessage(conInf));

        this.writeMessage(this.myMsg);
        var test = "http://www.stuff.com";

    }
}

const parsedParams : any = require('minimist')(process.argv.slice(2));
(new Main()).Main(parsedParams);

interface Config {
    url : string;
    httpVerb : "GET" | "POST";
    httpData : string;
}

/**
 Parse the command line arguments, recognize url and switching to POST *
 Add a function to get the HTTP message that you need to send *
 Fetch the URL
 Open socket
 Write message
 Get data back
*/
